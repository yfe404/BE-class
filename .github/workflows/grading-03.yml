name: Task_03 Evaluation

on:
  push:
    paths:
      - 'uploads/task03/**'
  pull_request:
    paths:
      - 'uploads/task03/**'

permissions:
  contents: write

jobs:
  evaluate-task03:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check file existence
      run: |
        if [ ! -f "uploads/task03/hello_world.s" ]; then
          echo "‚ùå Submission file not found"
          exit 1
        fi

    - name: Validate assembly syntax
      run: |
        cd uploads/task03/
        if grep -i "section\|global\|mov\|syscall" hello_world.s > /dev/null; then
          echo "‚úÖ Assembly syntax looks correct"
        else
          echo "‚ùå Incorrect assembly syntax detected"
          exit 1
        fi
        if grep -E "(rax|rdi|syscall)" hello_world.s > /dev/null; then
          echo "‚úÖ x86-64 instructions detected"
        else
          echo "‚ùå x86-64 instructions not found"
          exit 1
        fi

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y nasm

    - name: Assemble and link the program
      run: |
        cd uploads/task03/
        nasm -f elf64 -o hello_world.o hello_world.s
        ld -o hello_world hello_world.o

    - name: Test program execution and output
      run: |
        cd uploads/task03/
        set +e
        output=$(./hello_world)
        exit_code=$?
        set -e 
        if [[ "$output" == *"Hello World!"* ]]; then
          echo "‚úÖ OK"
        else
          echo "‚ùå KO"
          exit 1
        fi
        expected_shell_code=$((4242 % 256))
        if [ $exit_code -eq $expected_shell_code ]; then
          echo "‚úÖ OK"
        else
          echo "‚ùå KO"
          exit 1
        fi

    - name: Update README with next task
      if: success()
      run: |
        OWNER="${{ github.repository_owner }}"
        REPO="${{ github.event.repository.name }}"

        if [ -f ".github/subjects/task04.md" ]; then
          cp .github/subjects/task04.md current_task.md
          sed -i "s/OWNER/$OWNER/g" current_task.md
          sed -i "s/REPO/$REPO/g" current_task.md
          python3 << 'PYTHON_SCRIPT'
        import re
        with open('README.md', 'r') as f:
            content = f.read()
        with open('current_task.md', 'r') as f:
            task_content = f.read()
        task_pattern = r'(# Task_\d+)\n.*?(?=\Z)'
        updated_content = re.sub(
            task_pattern, 
            task_content.strip(), 
            content, 
            flags=re.DOTALL
        )
        with open('README.md', 'w') as f:
            f.write(updated_content)
        PYTHON_SCRIPT
          rm current_task.md
        fi

    - name: Commit README changes
      if: success()
      run: |
        git config --local user.email "batidora-action@github.com"
        git config --local user.name "üåÄ batidora"
        git add README.md
        git commit -m "‚úÖ Task_03 successfully passed" || exit 0
        git push
